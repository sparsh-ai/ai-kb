"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[141],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return _}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),l=c(n),_=a,m=l["".concat(p,".").concat(_)]||l[_]||u[_]||s;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function _(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=l;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},26421:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return _},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var r=n(87462),a=n(63366),s=(n(67294),n(3905)),i=["components"],o={},p="FastAPI Localhost",c={unversionedId:"best-practices/api/fastapi-localhost",id:"best-practices/api/fastapi-localhost",title:"FastAPI Localhost",description:"Requirements",source:"@site/docs/07-best-practices/api/fastapi-localhost.md",sourceDirName:"07-best-practices/api",slug:"/best-practices/api/fastapi-localhost",permalink:"/ai-kb/docs/best-practices/api/fastapi-localhost",editUrl:"https://github.com/sparsh-ai/ai-kb/docs/07-best-practices/api/fastapi-localhost.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FastAPI AWS Lambda",permalink:"/ai-kb/docs/best-practices/api/fastapi-aws-lambda"},next:{title:"Documentation",permalink:"/ai-kb/docs/best-practices/documentation/"}},d={},u=[{value:"Requirements",id:"requirements",level:2},{value:"App with API authentication",id:"app-with-api-authentication",level:2},{value:"App with OAuth2 authentication",id:"app-with-oauth2-authentication",level:2},{value:"Test",id:"test",level:2}],l={toc:u};function _(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"fastapi-localhost"},"FastAPI Localhost"),(0,s.kt)("h2",{id:"requirements"},"Requirements"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="/requirements.txt"',title:'"/requirements.txt"'},"fastapi>=0.73\nuvicorn>=0.17.4\nrequests\npython-multipart\npython-jose\ncryptography\npasslib[bcrypt]\n")),(0,s.kt)("h2",{id:"app-with-api-authentication"},"App with API authentication"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/app.py"',title:'"/app.py"'},'from typing import List\nimport os\n\nfrom fastapi import Depends, FastAPI, HTTPException, status, Security, BackgroundTasks\nfrom fastapi.security.api_key import APIKeyQuery, APIKeyHeader, APIKey\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\n\nfrom src.model import MyClassificationModel\n\nimport src.handle as handle\n\n\nroot_dir = \'../../data/artifacts\'\n\n\napp = FastAPI(title="Classification API", \n              description="Classifies the text reviews", \n              version="1.0")\n\n\n##########################################################################################\n## AUTH CODE ##\n##########################################################################################\n\n\nAPI_KEY_HASH = "<api_key>"\nAPI_KEY_NAME = "access_token"\n\napi_key_query = APIKeyQuery(name=API_KEY_NAME, auto_error=False)\napi_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=False)\n\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\nasync def get_api_key(\n    api_key_query: str = Security(api_key_query),\n    api_key_header: str = Security(api_key_header),\n):\n    print(api_key_query)\n    print(api_key_header)\n    \n    if api_key_query is not None and verify_password(api_key_query, API_KEY_HASH):\n        return api_key_query\n    elif api_key_header is not None and verify_password(api_key_header, API_KEY_HASH):\n        return api_key_header\n    else:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED, detail="Could not validate credentials"\n        )\n\n\n##########################################################################################\n## APP CODE ##\n##########################################################################################\n\n\nclass body_classify_text(BaseModel):\n    user_id : str\n    product_ids : List\n    weights : dict = None\n    return_df : bool = False\n\n@app.get("/")\nasync def read_main(background_tasks: BackgroundTasks):\n    return {"msg": "Text Classification API"}\n\n\n@app.post(\'/classify_text\')\nasync def classify_text(data: body_classify_text, api_key: APIKey = Depends(get_api_key)):\n    predictions = handle.model_classify_text.predict(user_id = data.user_id, \n                                                            product_ids = data.product_ids)\n    return {"predictions": predictions}\n\n\n##########################################################################################\n## HANDLER ##\n##########################################################################################\n\nif __name__ == \'__main__\':\n    uvicorn.run(app)\n')),(0,s.kt)("h2",{id:"app-with-oauth2-authentication"},"App with OAuth2 authentication"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/app.py"',title:'"/app.py"'},'from typing import List, Optional\nfrom datetime import datetime, timedelta\nimport os\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\n\nfrom src.model import MyClassificationModel\n\nimport src.handle as handle\n\n\nroot_dir = \'../../data/artifacts\'\n\n\napp = FastAPI(title="Classification API", \n              description="Classifies the text reviews", \n              version="1.0")\n\n\n##########################################################################################\n## AUTH CODE ##\n##########################################################################################\n\n\n# openssl rand -hex 32\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = "<randomhash>"\nALGORITHM = "HS256"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nusers_db = {\n    "user": {\n        "username": "user",\n        "full_name": "John Doe",\n        "email": "jdoe@example.com",\n        "hashed_password": "<hash>",\n        "disabled": False,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n    \n    \nclass User(BaseModel):\n    username: str\n    email: Optional[str] = None\n    full_name: Optional[str] = None\n    disabled: Optional[bool] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n    \n    \npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(db, username: str, password: str):\n    user = get_user(db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({"exp": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail="Could not validate credentials",\n        headers={"WWW-Authenticate": "Bearer"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get("sub")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail="Inactive user")\n    return current_user\n\n\n@app.post("/token", response_model=Token)\nasync def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n    user = authenticate_user(users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail="Incorrect username or password",\n            headers={"WWW-Authenticate": "Bearer"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={"sub": user.username}, expires_delta=access_token_expires\n    )\n    return {"access_token": access_token, "token_type": "bearer"}\n\n\n##########################################################################################\n## APP CODE ##\n##########################################################################################\n\n\nclass body_classify_text(BaseModel):\n    user_id : str\n    product_ids : List = None\n    weights : dict = None\n\n\n@app.on_event(\'startup\')\nasync def load_model():\n    handle.model_classify_text = MyClassificationModel(root_dir)\n\n\n@app.get("/")\nasync def read_main(current_user: User = Depends(get_current_active_user)):\n    return {"msg": "Text Classification API"}\n    \n\n@app.post(\'/classify_text\')\nasync def classify_text(data: body_classify_text, current_user: User = Depends(get_current_active_user)):\n    predictions = handle.model_classify_text.predict(user_id = data.user_id, \n                                                            product_ids = data.product_ids)\n    return {"predictions": predictions}\n')),(0,s.kt)("h2",{id:"test"},"Test"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/tests/test_api.py"',title:'"/tests/test_api.py"'},'from fastapi.testclient import TestClient\nfrom app import app\nimport json\n\nclient = TestClient(app)\n\ndef test_root():\n    response_auth = client.get("/")\n    assert response_auth.status_code == 200\n    \ndef test_some_post():\n    data = {"id": "2"}\n    response_auth = client.post("/predict",\n                           headers={"X-Token": "coneofsilence"},\n                           json=data)\n    assert response_auth.status_code == 200 \n    assert response_auth.json()["predictions"] == "{\'weighted_similarity\': {1: 1.7320508075688767, 2: 0.7071067811865475}}"\n')))}_.isMDXComponent=!0}}]);