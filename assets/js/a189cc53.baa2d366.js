"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7299],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},66831:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),i=["components"],s={},c="FastAPI AWS Lambda",l={unversionedId:"best-practices/api/fastapi-aws-lambda",id:"best-practices/api/fastapi-aws-lambda",title:"FastAPI AWS Lambda",description:"CI/CD Cloudformation template",source:"@site/docs/07-best-practices/api/fastapi-aws-lambda.md",sourceDirName:"07-best-practices/api",slug:"/best-practices/api/fastapi-aws-lambda",permalink:"/ai-kb/docs/best-practices/api/fastapi-aws-lambda",editUrl:"https://github.com/sparsh-ai/ai-kb/docs/07-best-practices/api/fastapi-aws-lambda.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/ai-kb/docs/best-practices/api/"},next:{title:"FastAPI Localhost",permalink:"/ai-kb/docs/best-practices/api/fastapi-localhost"}},p={},u=[{value:"CI/CD Cloudformation template",id:"cicd-cloudformation-template",level:2},{value:"API Cloudformation template",id:"api-cloudformation-template",level:2},{value:"Buildspec",id:"buildspec",level:2},{value:"S3-EFS Lambda",id:"s3-efs-lambda",level:2},{value:"Dockerfile",id:"dockerfile",level:2}],m={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fastapi-aws-lambda"},"FastAPI AWS Lambda"),(0,o.kt)("h2",{id:"cicd-cloudformation-template"},"CI/CD Cloudformation template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pipeline.yml"',title:'"pipeline.yml"'},"AWSTemplateFormatVersion: 2010-09-09\nDescription: The CloudFormation template for the CodePipeline.\nParameters:\n  ProjectName:\n    Type: String\n    Default: model-api\n  ENV:\n    Type: String\n    Default: dev\n  GithubUserName:\n    Type: String\n    Default: <user name>\n  GithubRepo:\n    Type: String\n    Default: <repo name>\n    Type: String\n    Default: <branch name>\n  GithubOAuthToken:\n    Type: String\n    Default: ghp_** <github user access token>\nResources:\n  S3Bucket:\n    Type: 'AWS::S3::Bucket'\n    Properties:\n      BucketName: !Join \n        - '-'\n        - - !Ref ProjectName\n          - !Ref ENV\n  ECRRepository:\n    Type: AWS::ECR::Repository\n    Properties: \n      RepositoryName: !Join \n        - '-'\n        - - !Ref ProjectName\n          - !Ref ENV\n  CodePipeLineExecutionRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: codepipeline.amazonaws.com\n            Action: 'sts:AssumeRole'\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/AdministratorAccess'\n  CodeBuildExecutionRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          Effect: Allow\n          Principal:\n            Service: codebuild.amazonaws.com\n          Action: 'sts:AssumeRole'\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/AdministratorAccess'\n  CloudformationExecutionRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cloudformation.amazonaws.com\n            Action: 'sts:AssumeRole'\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/AdministratorAccess'\n  # CodeBuildDockerCacheRole:\n  #   Type: 'AWS::IAM::Role'\n  #   Properties:\n  #     AssumeRolePolicyDocument:\n  #       Statement:\n  #         - Effect: Allow\n  #           Principal:\n  #             Service: ecr.amazonaws.com\n  #           Action: 'sts:AssumeRole'\n  #     ManagedPolicyArns:\n  #       - 'arn:aws:iam::aws:policy/AdministratorAccess'\n  BuildProject:\n    Type: 'AWS::CodeBuild::Project'\n    Properties:\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: 'aws/codebuild/standard:5.0'\n        ImagePullCredentialsType: CODEBUILD\n        PrivilegedMode: true\n        Type: LINUX_CONTAINER\n        EnvironmentVariables:\n          - Name: ECR_REPOSITORY_URI\n            Value: !Join [ \".\", [ !Ref \"AWS::AccountId\", \"dkr.ecr\", !Ref \"AWS::Region\", !Join [ \"/\", [ \"amazonaws.com\", !Ref \"ECRRepository\" ] ] ] ]\n      Name: !Join \n        - '-'\n        - - !Ref ProjectName\n          - BuildProject\n          - !Ref ENV\n      ServiceRole: !Ref CodeBuildExecutionRole\n      Source:\n        Type: CODEPIPELINE\n        BuildSpec: buildspec.yml\n      Cache:\n        Type: LOCAL\n        Modes:\n          - LOCAL_CUSTOM_CACHE\n          - LOCAL_DOCKER_LAYER_CACHE\n          - LOCAL_SOURCE_CACHE\n  CodePipeLine:\n    Type: 'AWS::CodePipeline::Pipeline'\n    DependsOn: S3Bucket\n    Properties:\n      ArtifactStore:\n        Location: !Join \n          - '-'\n          - - !Ref ProjectName\n            - !Ref ENV\n        Type: S3\n      Name: !Join \n        - '-'\n        - - !Ref ProjectName\n          - CodePipeLine\n          - !Ref ENV\n      RestartExecutionOnUpdate: false\n      RoleArn:\n        'Fn::GetAtt':\n          - CodePipeLineExecutionRole\n          - Arn\n      Stages:\n        - Name: Source\n          Actions:\n            - Name: Source\n              ActionTypeId:\n                Category: Source\n                Owner: ThirdParty\n                Provider: GitHub\n                Version: 1\n              Configuration:\n                Repo: !Ref GithubRepo\n                Branch: !Ref GithubBranch\n                Owner: !Ref GithubUserName\n                OAuthToken: !Ref GithubOAuthToken\n              RunOrder: 1\n              OutputArtifacts:\n                - Name: source-output-artifacts\n        - Name: Build\n          Actions:\n            - Name: Build\n              ActionTypeId:\n                Category: Build\n                Owner: AWS\n                Version: 1\n                Provider: CodeBuild\n              OutputArtifacts:\n                - Name: build-output-artifacts\n              InputArtifacts:\n                - Name: source-output-artifacts\n              Configuration:\n                ProjectName: !Ref BuildProject\n              RunOrder: 1\n")),(0,o.kt)("h2",{id:"api-cloudformation-template"},"API Cloudformation template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="template.yml"',title:'"template.yml"'},"AWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::Serverless-2016-10-31'\nDescription: An AWS Serverless Specification template for text classification model.\n\nGlobals:\n  Function:\n    Timeout: 30\n    MemorySize: 10000\n    Environment:\n      Variables:\n        MODEL_DIR: /mnt/ml/models/\n        NETWORK_DIR: /mnt/ml/network/ \n\nParameters:\n  SrcBucket:\n    Type: String\n    Description: Name of S3 bucket which will have the new ML models \n    Default: text-classifier-api-dev-models\n\nResources:\n\n  MyS3Bucket:\n    Type: 'AWS::S3::Bucket'\n    Properties:\n      BucketName: !Ref SrcBucket\n      \n  EfsLambdaVpc:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: \"10.0.0.0/16\"\n\n  InternetGateway:\n    Type: 'AWS::EC2::InternetGateway'\n    Properties:\n      Tags:\n      - Key: Name\n        Value: !Sub '10.0.0.0/16'\n\n  VPCGatewayAttachment:\n    Type: 'AWS::EC2::VPCGatewayAttachment'\n    Properties:\n      VpcId: !Ref EfsLambdaVpc\n      InternetGatewayId: !Ref InternetGateway\n      \n  SubnetAPublic:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref EfsLambdaVpc\n      AvailabilityZone: !Select [ 0, !GetAZs '' ]\n      MapPublicIpOnLaunch: true\n      CidrBlock: \"10.0.0.0/24\"\n      \n  SubnetAPrivate:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref EfsLambdaVpc\n      AvailabilityZone: !Select [ 1, !GetAZs '' ]\n      CidrBlock: \"10.0.1.0/24\"\n\n  RouteTableAPublic:\n    Type: 'AWS::EC2::RouteTable'\n    Properties:\n      VpcId: !Ref EfsLambdaVpc\n\n  RouteTableAPrivate:\n    Type: 'AWS::EC2::RouteTable'\n    Properties:\n      VpcId: !Ref EfsLambdaVpc\n\n  RouteTableAssociationAPublic:\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\n    Properties:\n      SubnetId: !Ref SubnetAPublic\n      RouteTableId: !Ref RouteTableAPublic\n      \n  RouteTableAssociationAPrivate:\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\n    Properties:\n      SubnetId: !Ref SubnetAPrivate\n      RouteTableId: !Ref RouteTableAPrivate\n      \n  RouteTablePublicAInternetRoute:\n    Type: 'AWS::EC2::Route'\n    DependsOn: VPCGatewayAttachment\n    Properties:\n      RouteTableId: !Ref RouteTableAPublic\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref InternetGateway\n\n  EIPA:\n    Type: 'AWS::EC2::EIP'\n    Properties:\n      Domain: vpc\n      \n  NatGatewayA:\n    Type: 'AWS::EC2::NatGateway'\n    Properties:\n      AllocationId: !GetAtt 'EIPA.AllocationId'\n      SubnetId: !Ref SubnetAPublic\n\n  RouteA:\n    Type: 'AWS::EC2::Route'\n    Properties:\n      RouteTableId: !Ref RouteTableAPrivate\n      DestinationCidrBlock: '0.0.0.0/0'\n      NatGatewayId: !Ref NatGatewayA\n        \n  EfsLambdaSecurityGroup:\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupDescription: 'Security group for NAT Gateway Lambda'\n      VpcId: !Ref EfsLambdaVpc\n      SecurityGroupEgress:\n        - CidrIp: \"0.0.0.0/0\"\n          # FromPort: 0\n          # ToPort: 65535\n          IpProtocol: -1\n      SecurityGroupIngress:\n        - CidrIp: \"0.0.0.0/0\"\n          # FromPort: 0\n          # ToPort: 65535\n          IpProtocol: -1     \n  \n  EfsFileSystem:\n    Type: AWS::EFS::FileSystem\n    \n  MountTargetA:\n    Type: AWS::EFS::MountTarget\n    Properties:\n      FileSystemId: !Ref EfsFileSystem\n      SubnetId: !Ref SubnetAPrivate\n      SecurityGroups:\n        - !Ref EfsLambdaSecurityGroup\n\n  AccessPoint:\n    Type: AWS::EFS::AccessPoint\n    Properties:\n      FileSystemId: !Ref EfsFileSystem\n      PosixUser:\n        Gid: \"1000\"\n        Uid: \"1000\"\n      RootDirectory:\n        Path: \"/ml\"\n        CreationInfo:\n          OwnerGid: \"1000\"\n          OwnerUid: \"1000\"\n          Permissions: \"755\"\n          \n  MLModelUploadFunction:\n    Type: AWS::Serverless::Function\n    DependsOn:\n      - MountTargetA\n    Properties:\n      CodeUri: s3-efs/\n      Handler: app.lambda_handler\n      Runtime: python3.7  \n      FunctionName: lambda-model-s3-efs\n      VpcConfig:\n        SecurityGroupIds:\n          - !Ref EfsLambdaSecurityGroup\n        SubnetIds:\n          - !Ref SubnetAPrivate\n      FileSystemConfigs:\n        - Arn: !GetAtt AccessPoint.Arn\n          LocalMountPath: /mnt/ml\n      Policies:\n        - S3CrudPolicy: \n            BucketName: !Ref SrcBucket\n        - EFSWriteAccessPolicy:\n            FileSystem: !Ref EfsFileSystem\n            AccessPoint: !Ref AccessPoint\n      Events:\n        UploadMLModelEvent:\n          Type: S3\n          Properties:\n            Bucket: !Ref MyS3Bucket\n            Events: s3:ObjectCreated:*\n\n  TextClassifierAPIFunction:\n    Type: 'AWS::Serverless::Function'\n    DependsOn: \n      - MountTargetA\n    Properties:\n      PackageType: Image\n      Description: ''\n      FunctionName: lambda-model-api\n      VpcConfig:\n        SecurityGroupIds:\n          - !Ref EfsLambdaSecurityGroup\n        SubnetIds:\n          - !Ref SubnetAPrivate\n      FileSystemConfigs:\n        - Arn: !GetAtt AccessPoint.Arn\n          LocalMountPath: /mnt/ml\n      Policies:\n        - S3CrudPolicy: \n            BucketName: !Ref SrcBucket\n        - EFSWriteAccessPolicy:\n            FileSystem: !Ref EfsFileSystem\n            AccessPoint: !Ref AccessPoint \n      Events:\n        Api1:\n          Type: Api\n          Properties:\n            Path: '/{proxy+}'\n            Method: ANY\n            RestApiId:\n              Ref: FastapiGateway\n        Api2:\n          Type: Api\n          Properties:\n            Path: /\n            Method: ANY\n            RestApiId:\n              Ref: FastapiGateway\n      Environment:\n        Variables:\n          STAGE: dev\n\n    Metadata:\n      Dockerfile: Dockerfile\n      DockerContext: ./app\n      DockerTag: latest\n          \n  FastapiGateway:\n      Type: AWS::Serverless::Api\n      Properties:\n          StageName: dev\n          OpenApiVersion: '3.0.0'\n")),(0,o.kt)("h2",{id:"buildspec"},"Buildspec"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="buildspec.yml"',title:'"buildspec.yml"'},'version: 0.2\nenv:\n    variables:\n      CONTAINER_REPO_URL: <account-id>.dkr.ecr.<region>.amazonaws.com\n      CONTAINER_REPO_NAME: <reco-name>\n      REGION: <region>\n      TAG_NAME: latest\nphases:\n  install:\n    commands:\n      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &\n      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"\n  pre_build:\n    commands:\n      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $CONTAINER_REPO_URL\n  build:\n    commands:\n      - sam build --use-container\n      - sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name sam-$CONTAINER_REPO_NAME --s3-bucket $CONTAINER_REPO_NAME --image-repository $CONTAINER_REPO_URL/$CONTAINER_REPO_NAME --capabilities CAPABILITY_IAM --region $REGION\n')),(0,o.kt)("h2",{id:"s3-efs-lambda"},"S3-EFS Lambda"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/s3-efs/app.py"',title:'"/s3-efs/app.py"'},"import boto3\nimport os\n\nmodel_dir = os.getenv('MODEL_DIR', '/mnt/ml/models/')\ns3 = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    \n    raw_dir = os.path.join(model_dir, 'raw')\n    processed_dir = os.path.join(model_dir, 'processed')\n    \n    os.makedirs(raw_dir, exist_ok=True)\n    os.makedirs(processed_dir, exist_ok=True)\n\n    bucket_name = event['Records'][0]['s3']['bucket']['name']\n    key = event['Records'][0]['s3']['object']['key']\n    \n    save_path = os.path.join(model_dir, key)\n    \n    print(save_path)\n    \n    os.makedirs(os.path.dirname(save_path), exist_ok=True)\n    \n    s3.download_file(bucket_name, key, save_path)\n    \n    print(\"ML Model file downloaded!\")\n")),(0,o.kt)("h2",{id:"dockerfile"},"Dockerfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="/app/Dockerfile"',title:'"/app/Dockerfile"'},'FROM public.ecr.aws/lambda/python:3.8\nRUN yum install -y openblas-serial\\\ngmp gmp-devel\nCOPY requirements.txt ./\nRUN python3.8 -m pip install -r requirements.txt \nRUN mkdir -p /mnt/ml\nRUN mkdir -p ./app\nCOPY app.py ./app/\nCOPY src/ ./app/src/\nCOPY __init__.py ./app/\nCMD ["app.app.handler"]\n')))}d.isMDXComponent=!0}}]);