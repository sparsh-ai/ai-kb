"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2771],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},52975:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],s={},l="Named Entity Recognition",c={unversionedId:"concepts/nlp/named-entity-recognition",id:"concepts/nlp/named-entity-recognition",title:"Named Entity Recognition",description:"/img/content-concepts-raw-nlp-named-entity-recognition-img.png",source:"@site/docs/03-concepts/nlp/named-entity-recognition.mdx",sourceDirName:"03-concepts/nlp",slug:"/concepts/nlp/named-entity-recognition",permalink:"/ai-kb/docs/concepts/nlp/named-entity-recognition",editUrl:"https://github.com/sparsh-ai/ai-kb/docs/03-concepts/nlp/named-entity-recognition.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Language Modeling",permalink:"/ai-kb/docs/concepts/nlp/language-modeling"},next:{title:"Text Analysis",permalink:"/ai-kb/docs/concepts/nlp/text-analysis"}},d={},p=[{value:"<strong>Introduction</strong>",id:"introduction",level:2},{value:"<strong>Models</strong>",id:"models",level:2},{value:"Flair-NER",id:"flair-ner",level:3},{value:"Spacy-NER",id:"spacy-ner",level:3},{value:"Transformer-NER",id:"transformer-ner",level:3},{value:"<strong>Process flow</strong>",id:"process-flow",level:2},{value:"<strong>Use Cases</strong>",id:"use-cases",level:2},{value:"Name and Address Parsing",id:"name-and-address-parsing",level:3},{value:"NER Methods Experiment",id:"ner-methods-experiment",level:3}],u={toc:p};function m(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"named-entity-recognition"},"Named Entity Recognition"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",alt:"/img/content-concepts-raw-nlp-named-entity-recognition-img.png",src:n(15663).Z,width:"960",height:"720"})),(0,o.kt)("h2",{id:"introduction"},(0,o.kt)("strong",{parentName:"h2"},"Introduction")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Definition:")," NER models classify each word/phrase in the document into a pre-defined category. In other words, these models identify named entities (classes/labels) in the given text document"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Applications:")," Opinion mining, Affinity towards brands"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Scope:")," No scope decided yet"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Tools:")," Doccano, Flair, Spacy, HuggingFace Transformer Library")),(0,o.kt)("h2",{id:"models"},(0,o.kt)("strong",{parentName:"h2"},"Models")),(0,o.kt)("h3",{id:"flair-ner"},"Flair-NER"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://www.aclweb.org/anthology/N19-1078/"},"Pooled Contextualized Embeddings for Named Entity Recognition. ACL, 2019."))),(0,o.kt)("p",null,"Contextual string embeddings are a recent type of contextualized word embedding that were shown to yield state-of-the-art results when utilized in a range of sequence labeling tasks. This model achieves an F1 score of 93.2 on the CoNLL-03 dataset. "),(0,o.kt)("h3",{id:"spacy-ner"},"Spacy-NER"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://spacy.io/universe/project/video-spacys-ner-model"},"Incremental parsing with bloom embeddings and residual CNNs."))," "),(0,o.kt)("p",null,'spaCy v2.0\'s Named Entity Recognition system features a sophisticated word embedding strategy using subword features and "Bloom" embeddings, a deep convolutional neural network with residual connections, and a novel transition-based approach to named entity parsing.'),(0,o.kt)("h3",{id:"transformer-ner"},"Transformer-NER"),(0,o.kt)("p",null,"Fine-tuning of transformer based models like BERT, Roberta and Electra."),(0,o.kt)("h2",{id:"process-flow"},(0,o.kt)("strong",{parentName:"h2"},"Process flow")),(0,o.kt)("p",null,"Step 1: Collect Text Data"),(0,o.kt)("p",null,"Fetch the raw text dataset into a directory."),(0,o.kt)("p",null,"Step 2: Create Labels"),(0,o.kt)("p",null,"Use open-source tools like Doccano or paid tools like Prodigy to annotate the entities."),(0,o.kt)("p",null,"Step 3: Model Training & Validation"),(0,o.kt)("p",null,"Train the NER model and validate it."),(0,o.kt)("p",null,"Step 4: UAT Testing"),(0,o.kt)("p",null,"Wrap the model inference engine in API for client testing. We will receive a text document from the user, encode it with our text encoder, find TopK similar vectors using Indexing object, and retrieve the text documents (and metadata) using dictionaries. We send these documents (and metadata) back to the user."),(0,o.kt)("p",null,"Step 5: Deployment"),(0,o.kt)("p",null,"Deploy the model on cloud or edge as per the requirement."),(0,o.kt)("p",null,"Step 6: Documentation"),(0,o.kt)("p",null,"Prepare the documentation and transfer all assets to the client."),(0,o.kt)("h2",{id:"use-cases"},(0,o.kt)("strong",{parentName:"h2"},"Use Cases")),(0,o.kt)("h3",{id:"name-and-address-parsing"},"Name and Address Parsing"),(0,o.kt)("p",null,"Parse names (person ","[first, middle and last name]",", household or corporation) and address (street, city, state, country, zip) from the given text. We used Doccano for annotation and trained a Flair NER model on GPU. Check out this ",(0,o.kt)("a",{parentName:"p",href:"https://www.notion.so/Name-Address-Parsing-209653cc37d2413f9b6e902712338ed4"},"notion"),"."),(0,o.kt)("h3",{id:"ner-methods-experiment"},"NER Methods Experiment"),(0,o.kt)("p",null,"Data is extracted from GMB(Groningen Meaning Bank) corpus and annotated using BIO scheme. 10 different NER models were trained and compared on this dataset. Frequency based tagging model was taken as the baseline. Classification, CRF, LSTM, LSTM-CRF, Char-LSTM, Residual-LSTM-ELMo, BERT tagger, Spacy tagger and an interpretable tagger with keras and LIME were trained. Checkout ",(0,o.kt)("a",{parentName:"p",href:"https://www.notion.so/Multiple-methods-NER-319c0e2cc2b74008a931b849377557d1"},"this")," notion."))}m.isMDXComponent=!0},15663:function(e,t,n){t.Z=n.p+"assets/images/content-concepts-raw-nlp-named-entity-recognition-img-9d0e5b0bc12e7d0bc2a581d9d8b0a83f.png"}}]);